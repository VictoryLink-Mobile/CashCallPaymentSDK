// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CashcallPaymentSDK
@_exported import CashcallPaymentSDK
import Foundation
import PassKit
import Swift
import UIKit
import WebKit
public class Order {
  @objc deinit
}
public enum Gateway3DSecureResult {
  case completed(gatewayResult: CashcallPaymentSDK.GatewayMap)
  case error(CashcallPaymentSDK.Gateway3DSecureError)
  case cancelled
}
public enum Gateway3DSecureError : Swift.Error {
  case missingGatewayResponse
  case mappingError
  public static func == (a: CashcallPaymentSDK.Gateway3DSecureError, b: CashcallPaymentSDK.Gateway3DSecureError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public class Gateway3DSecureViewController : UIKit.UIViewController, WebKit.WKNavigationDelegate {
  public var navBar: UIKit.UINavigationBar!
  public var cancelButton: UIKit.UIBarButtonItem!
  public var activityIndicator: UIKit.UIActivityIndicatorView!
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func authenticatePayer(htmlBodyContent: Swift.String, handler: @escaping (CashcallPaymentSDK.Gateway3DSecureViewController, CashcallPaymentSDK.Gateway3DSecureResult) -> Swift.Void)
  @objc public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc deinit
}
public enum GatewayError : Swift.Error, Swift.CustomStringConvertible {
  case failedRequest(Swift.Int, Swift.String)
  case invalidAPIVersion(Swift.String)
  case missingResponse
  public var description: Swift.String {
    get
  }
}
public protocol JSONEncoderProtocol {
  func encode<T>(_ value: T) throws -> Foundation.Data where T : Swift.Encodable
}
extension JSONEncoder : CashcallPaymentSDK.JSONEncoderProtocol {
}
public protocol JSONDecoderProtocol {
  func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
}
extension JSONDecoder : CashcallPaymentSDK.JSONDecoderProtocol {
}
public enum GatewayResult<T> {
  case success(T)
  case error(Swift.Error)
  public init(_ result: T)
  public init(_ result: Swift.Error)
}
extension Gateway : Foundation.URLSessionDelegate {
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
}
public struct GatewayMap {
  public enum DecodingError : Swift.Error {
    case invalidData([Swift.CodingKey])
  }
  public init()
  public init(_ dictionary: [Swift.String : Any])
  public var dictionary: [Swift.String : Any] {
    get
  }
  public var description: Swift.String {
    get
  }
  public subscript(key: Swift.String) -> Any? {
    get
    set(newValue)
  }
  public subscript(at path: Swift.String) -> Any? {
    get
    set(newValue)
  }
}
extension GatewayMap : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension GatewayMap : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension GatewayMap : Swift.Equatable {
  public static func == (lhs: CashcallPaymentSDK.GatewayMap, rhs: CashcallPaymentSDK.GatewayMap) -> Swift.Bool
}
extension GatewayMap : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@objc public class Gateway : ObjectiveC.NSObject {
  final public let region: CashcallPaymentSDK.GatewayRegion
  final public let merchantId: Swift.String
  public init(region: CashcallPaymentSDK.GatewayRegion, merchantId: Swift.String)
  @discardableResult
  public func updateSession(_ session: Swift.String, apiVersion: Swift.String, payload: CashcallPaymentSDK.GatewayMap, completion: @escaping (CashcallPaymentSDK.GatewayResult<CashcallPaymentSDK.GatewayMap>) -> Swift.Void) -> Foundation.URLSessionTask?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class PaymentConfirmation : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol CashcallPaymentDelegate {
  func onSuccess(message: Swift.String)
  func onError(message: Swift.Error)
  func onCancel()
}
public struct GatewayRegion : Swift.Equatable {
  public let id: Swift.String
  public let name: Swift.String
  public let baseURL: Swift.String
  public static func == (a: CashcallPaymentSDK.GatewayRegion, b: CashcallPaymentSDK.GatewayRegion) -> Swift.Bool
}
extension GatewayRegion {
  public static let asiaPacific: CashcallPaymentSDK.GatewayRegion
  public static let africaPacific: CashcallPaymentSDK.GatewayRegion
  public static let europe: CashcallPaymentSDK.GatewayRegion
  public static let northAmerica: CashcallPaymentSDK.GatewayRegion
  public static let mtf: CashcallPaymentSDK.GatewayRegion
  public static let india: CashcallPaymentSDK.GatewayRegion
  public static let china: CashcallPaymentSDK.GatewayRegion
  public static func other(id: Swift.String, name: Swift.String, baseURL: Swift.String) -> CashcallPaymentSDK.GatewayRegion
}
public enum CashcallBusinessException : Swift.String, Swift.Error {
  case GeneralError
  case ThreeDSNotRequired
  case ThreeDSFailByUser
  case ThreeDSCancelledByUser
  case ThreeDSRejectedByAcquirer
  case PaymentFail
  case MalformedJson
  case UpdateAcquirerSessionFail
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension CashcallBusinessException : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum HTTPMethod : Swift.String {
  case get
  case put
  case post
  case delete
  case head
  case trace
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public class CashcallConfiguration {
  public static let MERCHANT_CODE: Swift.String
  public static let API_KEY: Swift.String
  public static let ORDER: Swift.String
  public static let PAYMENT_REQUEST_CODE: Swift.Int
  public static let PAYMENT_RESULT_CODE: Swift.String
  public static let PAYMENT_MESSAGE: Swift.String
  public static let PAYMENT_REFERENCE_NUMBER: Swift.String
  public static let THEME_SHOW_LOGO: Swift.String
  public static let THEME_SHOW_ACTION_BAR: Swift.String
  public static let THEME_TITLE: Swift.String
  public static let THEME_MAJOR_COLOR: Swift.String
  public static let THEME_MINOR_COLOR: Swift.String
  public static let THEME_MAJOR_FONT_SIZE: Swift.String
  public static let THEME_MINOR_FONT_SIZE: Swift.String
  public static let THEME_MAJOR_TEXT_COLOR: Swift.String
  public static let THEME_MINOR_TEXT_COLOR: Swift.String
  @objc deinit
}
@objc public class CashcallPayment : UIKit.UIViewController {
  public func cardPayment(navigation: UIKit.UINavigationController, delegate: CashcallPaymentSDK.CashcallPaymentDelegate, merchantID: Swift.String, apiKey: Swift.String, order: [Swift.String : Any], theme: [Swift.String : Any], displayConfirmationPage: Swift.Bool = false)
  public func saveCardData(navigation: UIKit.UINavigationController, delegate: CashcallPaymentSDK.CashcallPaymentDelegate, merchantID: Swift.String, apiKey: Swift.String, order: [Swift.String : Any], theme: [Swift.String : Any])
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class CashcallCardPayment : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func didReceiveMemoryWarning()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CashcallPaymentSDK.Gateway3DSecureError : Swift.Equatable {}
extension CashcallPaymentSDK.Gateway3DSecureError : Swift.Hashable {}
extension CashcallPaymentSDK.CashcallBusinessException : Swift.Equatable {}
extension CashcallPaymentSDK.CashcallBusinessException : Swift.Hashable {}
extension CashcallPaymentSDK.CashcallBusinessException : Swift.RawRepresentable {}
extension CashcallPaymentSDK.HTTPMethod : Swift.Equatable {}
extension CashcallPaymentSDK.HTTPMethod : Swift.Hashable {}
extension CashcallPaymentSDK.HTTPMethod : Swift.RawRepresentable {}
